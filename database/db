const { Sequelize, DataTypes } = require('sequelize')
const DB_USERNAME = process.env.DB_USERNAME
const DB_PASSWORD = process.env.DB_PASSWORD
const DB_HOST = process.env.DB_HOST
const sequelize = new Sequelize('employees', DB_USERNAME, DB_PASSWORD, {
  host: DB_HOST,
  dialect: 'mysql',
  logging: function () {},
  pool: {
    max: 5,
    min: 0,
    idle: 10000,
  },
  define: {
    paranoid: true,
  },
})

const employees = sequelize.define(
  'employees',
  {
    emp_no: {
      type: DataTypes.INTEGER,
      autoIncrement: true,
      primaryKey: true,
    },
    birth_date: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    first_name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    last_name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    gender: {
      type: DataTypes.ENUM('M', 'F'),
      allowNull: false,
    },
    hire_date: {
      type: DataTypes.DATE,
      allowNull: false,
    },
  },
  {
    timestamps: false,
    freezeTableName: true,
  }
)

const departments = sequelize.define(
  'departments',
  {
    dept_no: {
      type: DataTypes.CHAR(4),
      autoIncrement: true,
      primaryKey: true,
    },
    dept_name: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true,
    },
  },
  {
    timestamps: false,
    freezeTableName: true,
  }
)

const dept_manager = sequelize.define(
  'dept_manager',
  {
    // emp_no: {
    //       type: DataTypes.INTEGER,
    //   autoIncrement: true,
    //   primaryKey: true,
    //   // FOREIGN KEY (emp_no)  REFERENCES employees (emp_no)    ON DELETE CASCADE,
    //   // FOREIGN KEY (dept_no) REFERENCES departments (dept_no) ON DELETE CASCADE,
    // },
    // dept_no: {
    //   type: DataTypes.CHAR(4),
    //       allowNull: false,
    //       primaryKey: true,
    // },
    from_date: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    to_date: {
      type: DataTypes.DATE,
      allowNull: false,
    },
  },
  {
    timestamps: false,
  }
)

const dept_emp = sequelize.define(
  'dept_emp',
  {
    // emp_no: {
    //   type: DataTypes.INTEGER,
    //   references: {
    //     model: employees,
    //     key: 'emp_no'
    //   }
    // },
    // dept_no: {
    //   type: DataTypes.CHAR(4),
    //   references: {
    //     model: departments,
    //     key: 'dept_no'
    //   }
    // },
    from_date: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    to_date: {
      type: DataTypes.DATE,
      allowNull: false,
    },
  },
  {
    timestamps: false,
    freezeTableName: true,
  }
)

const titles = sequelize.define(
  'titles',
  {
    title: {
      type: DataTypes.STRING,
      allowNull: false,
      primaryKey: true,
    },
    from_date: {
      type: DataTypes.DATE,
      allowNull: false,
      primaryKey: true,
    },
    to_date: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    // FOREIGN KEY (emp_no) REFERENCES employees (emp_no) ON DELETE CASCADE,
  },
  {
    timestamps: false,
  }
)

const salaries = sequelize.define(
  'salaries',
  {
    emp_no: {
      type: Sequelize.INTEGER,
      references: {
        model: employees,
        key: 'emp_no',
      },
    },
    salary: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    from_date: {
      type: DataTypes.DATE,
      allowNull: false,
    },
    to_date: {
      type: DataTypes.DATE,
      allowNull: false,
    },
  },
  {
    timestamps: false,
  }
)

const users = sequelize.define(
  'users',
  {
    role: {
      type: DataTypes.ENUM('manager'),
      allowNull: false,
    },
    password: {
      type: DataTypes.CHAR(255),
      allowNull: false,
    },
  },
  {
    freezeTableName: true,
  }
)

employees.hasOne(users, {
  foreignKey: 'emp_no',
  onDelete: 'CASCADE',
})

// Department manager relationship
// Employee.hasMany(Dept_Manager, {
//   foreignKey: 'emp_no',
//   onDelete: 'CASCADE'
// });
// //Dept_Manager.belongsTo(Employee);

// Departments.hasMany(Dept_Manager, {
//   foreignKey: 'dept_no',
//   onDelete: 'CASCADE'
// });
//Dept_Manager.belongsTo(Departments);

// Department employees
// Employee.hasMany(Dept_Emp, {
// foreignKey: 'emp_no',
// onDelete: 'CASCADE'
// });
departments.belongsToMany(employees, { through: dept_emp })

// Departments.hasMany(Dept_Emp, {
//   foreignKey: 'dept_no',
//   onDelete: 'CASCADE'
// });
employees.belongsToMany(departments, { through: dept_emp })

// Titles
employees.hasMany(titles, {
  foreignKey: 'emp_no',
  onDelete: 'CASCADE',
})
//Titles.belongsTo(Employee);

// Salaries
employees.hasMany(salaries, {
  foreignKey: {
    name: 'emp_no',
    allowNull: false,
  },
  onDelete: 'CASCADE',
})
salaries.removeAttribute('id')

dept_emp.removeAttribute('id')
users.removeAttribute('id')

const connectDB = async () => {
  try {
    await sequelize.authenticate()
    console.log('Connection has been established successfully.')
  } catch (error) {
    console.error('Unable to connect to the database:', error)
  }
}

const getEmployeeSalaries = async (req, res, next) => {
  console.log(req.user)
  try {
    const employeeNo = parseInt(req.params.id)
    const employeeSalaries = await sequelize.models.salaries.findAll({
      where: {
        emp_no: employeeNo,
      },
      raw: true,
      nest: true,
    })
    if (employeeSalaries.length > 0) {
      res.json(employeeSalaries)
    } else {
      res.status(404).json()
    }
  } catch (error) {
    console.error('Unable to find salaries:', error)
  }
}

const getEmployee = async (req, res, next) => {
  try {
    const employeeNo = parseInt(req.params.id)
    const result = await sequelize.models.employees.findAll({
      where: {
        emp_no: employeeNo,
      },
      raw: true,
      nest: true,
    })
    if (result.length > 0) {
      res.json(result[0])
    } else {
      res.status(404).json()
    }
  } catch (error) {
    console.error('Unable to find employee:', error)
  }
}

const getEmployeeDepartments = async (req, res, next) => {
  try {
    const employeeNo = parseInt(req.params.id)
    const result = await sequelize.models.employees.findAll({
      where: {
        emp_no: employeeNo,
      },
      raw: true,
      // nest: true,
      include: [
        {
          model: departments,
        },
      ],
    })
    if (result.length > 0) {
      res.json(result)
    } else {
      res.status(404).json()
    }
  } catch (error) {
    console.error('Unable to find employee department:', error)
  }
}

const getUser = async (employeeNo, password) => {
  try {
    const user = await sequelize.models.users.findOne({
      where: {
        emp_no: employeeNo,
        password: password,
      },
      raw: true,
    })
    if (user) {
      return user
    } else {
      return null
    }
  } catch (error) {
    console.error('Unable to find user:', error)
  }
}

module.exports = {
  connectDB,
  getEmployeeSalaries,
  getEmployee,
  getEmployeeDepartments,
  getUser,
}
